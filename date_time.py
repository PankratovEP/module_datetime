# импортируем тип date из модуля datetime
from datetime import date
from math import ceil


#Дополните приведенный ниже код, чтобы он вывел текущую дату в ISO формате (YYYY-MM-DD).

# выводим текущую дату
print(date.today())


# Ураган Эндрю, обрушившийся на Флориду 2424 августа 19921992 года, был одним из самых дорогостоящих и смертоносных
# ураганов в истории США. Дополните приведенный ниже код, чтобы он вывел день недели (начиная с 00), в который ураган
# Эндрю достиг берегов США.

# создаем объект, соответсвующий дате урагана
hurricane_andrew = date(1992, 8, 24)

# выводим день недели
print(hurricane_andrew.weekday())


# счетчик для нужного количества ураганов
early_hurricanes = 0

# На Флориду с 19501950 по 20172017 год всего обрушилось 235235 ураганов. В переменной florida_hurricane_dates хранится
# список дат, в которые произошел ураган. Сезон ураганов в Атлантике официально начинается 11 июня. Дополните
# приведенный ниже код, чтобы он вывел количество ураганов с 19501950 года, которые обрушились на Флориду до
# официального начала сезона ураганов.

# цикл по датам в которые был ураган
for hurricane in florida_hurricane_dates:
    # если месяц урагана меньше чем июнь (порядковый номер 6)
    if hurricane.month < 6:
        early_hurricanes += 1

print(early_hurricanes)


# Вам доступен список dates, содержащий даты. Дополните приведенный ниже код, чтобы он вывел год и номер квартала каждой
# даты из данного списка. Компоненты дат должны быть расположены в исходном порядке, каждые на отдельной строке, в
# следующем формате:


dates = [date(2010, 9, 28), date(2017, 1, 13), date(2009, 12, 25), date(2010, 2, 27), date(2021, 10, 11), date(2020, 3, 13), date(2000, 7, 7), date(1999, 4, 14), date(1789, 11, 19), date(2013, 8, 21), date(1666, 6, 6), date(1968, 5, 26)]
for i in dates:
    print(f'{i.year}-Q{ceil(i.month/3)}')


# Реализуйте функцию get_min_max(), которая принимает один аргумент: dates — список дат (тип date)
# Функция должна возвращать кортеж, первым элементом которого является минимальная дата из списка dates, вторым —
# максимальная дата из списка dates. Если список dates пуст, функция должна вернуть пустой кортеж.
from datetime import date

def get_min_max(dates):
    if dates:
        return (min(dates), max(dates))
    return tuple()



#Реализуйте функцию get_date_range(), которая принимает два аргумента в следующем порядке:
# start — начальная дата, тип date
# end — конечная дата, тип date
# Функция get_date_range() должна возвращать список, состоящий из дат (тип date) от start до end включительно.
# Если start > end, функция должна вернуть пустой список.
def get_date_range(start, end):
    return [date.fromordinal(i) for i in range(date.toordinal(start), date.toordinal(end)+1)]


'''Реализуйте функцию saturdays_between_two_dates(), которая принимает два аргумента в следующем порядке:

start — начальная дата, тип date
end — конечная дата, тип date
Функция должна возвращать количество суббот между датами start и end включительно.

Примечание 1. Даты могут передаваться в любом порядке, то есть не гарантируется, что первая дата меньше второй.

Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую функцию 
saturdays_between_two_dates(), но не код, вызывающий ее.'''

def saturdays_between_two_dates(start, end):
    if start >= end:
        start, end = end, start
    return sum(map(lambda d: d.weekday()==5 ,[date.fromordinal(i) for i in range(date.toordinal(start), date.toordinal(end)+1)]))

















